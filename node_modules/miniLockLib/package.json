{
  "name": "miniLockLib",
  "version": "0.0.0",
  "description": "Do miniLock file encryption operations on a web page of your own.",
  "main": "miniLockLib.js",
  "scripts": {
    "start": "coffee --watch --compile --output dependencies miniLockLib.coffee",
    "test": "make && open -a 'Google Chrome' http://minilocklib.dev/tests.html"
  },
  "repository": {
    "type": "git",
    "url": "git+https://git@github.com/45678/miniLockLib.git"
  },
  "author": {
    "name": "45678",
    "email": "undefined@undefined"
  },
  "license": "Public Domain",
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "miniLock": "git+ssh://git@github.com:kaepora/miniLock.git",
    "nacl-stream": "git+ssh://git@github.com:dchest/nacl-stream-js.git",
    "nodeunit": "^0.9.0",
    "scrypt": "^3.0.1",
    "tweetnacl": "^0.10.1",
    "uglify-js": "^2.4.15",
    "zxcvbn": "git+ssh://git@github.com:dropbox/zxcvbn.git"
  },
  "readme": "`miniLockLib` is a fly-by-the-seat-of-your-pants implementation of the [miniLock](http://minilock.io/) file encryption specification. It is designed to perform miniLock encryption and decryption operations in your own Javascript web programs.\n\n#### Setup\n\nTo get started place the [`miniLockLib.js`](https://raw.githubusercontent.com/45678/miniLockLib/master/miniLockLib.js) and [`miniLockCryptoWorker.js`](https://raw.githubusercontent.com/45678/miniLockLib/master/miniLockCryptoWorker.js) files on your web host and then include `miniLockLib.js` in a script tag on your web page, like this:\n\n```\n<script src=\"/scripts/miniLockLib.js\"></script>\n```\n\nYou will also need to setup `miniLockLib.pathToScripts` so that the crypto worker can be loaded reliably. Add a line like this to your program to configure it: \n\n```\nminiLockLib.pathToScripts = '/scripts'\n```\n\n#### Examples\n\nCall `getKeyPair` with `secretPhrase` and `emailAddress` to get a pair of `keys`:\n\n```\nminiLockLib.getKeyPair(secretPhrase, emailAddress, function(keys){\n   keys.publicKey is a 32-bit Uint8Array\n   keys.secretKey is a 32-bit Uint8Array\n})\n```\n\nPass `file`, `name`, `keys` and `miniLockIDs` arguments when you `encrypt` a file:\n\n```\nminiLockLib.encrypt({\n  file: arrayBufferOfBinaryData,\n  name: 'sensitive_document.txt'\n  keys: {publicKey: Uint8Array, secretKey: Uint8Array},\n  miniLockIDs: [aliceID, bobbyID, ...]\n  callback: function(error, encrypted) {\n    encrypted.data is a Blob of the encrypted data\n    encrypted.data.size is the Number of bytes in the encrypted file\n    encrypted.data.type is 'application/minilock'\n    encrypted.name is 'sensitive document.txt.minilock'\n    encrypted.senderID is the miniLock ID of the person who encrypted the file\n  }\n})\n```\n\nPass `file` and `keys` arguments when you `decrypt` a file:\n\n```\nminiLockLib.decrypt({\n  file: arrayBufferOfBinaryData,\n  keys: {publicKey: Uint8Array, secretKey: Uint8Array},\n  callback: function(error, decrypted) {\n    decrypted.data is a Blob of the decrypted data\n    decrypted.data.size is the Number of bytes in the decrypted file \n    decrypted.name is the decrypted name of file as a String\n    decrypted.senderID is the miniLock ID of the person who encrypted the file\n  }\n})\n```\n\n#### Sources\n\n`miniLockLib` is composed of code from six dandy little projects:\n\n`miniLockCryptoWorker.js` is a copy of the crypto worker from the [official miniLock repository](https://github.com/kaepora/miniLock) created and maintained by Nadim Kobeissi. It has been modified to import `miniLockLib.js` instead of importing all its dependencies individually. The worker is responsible for processing `encrypt` and `decrypt` operations in the background.\n\n`Base58.js` is a copy of the [cryptocoinjs bs58 library](https://github.com/cryptocoinjs/bs58). It has been modified to work in a web agent window instead of a node.js environment. And the filename was changed to match the global `Base58` address that it defines. `Base58` is used to encode and decode miniLock IDs.\n\n`BLAKE2s.js` is an unmodified copy of Dmitry Chestnykh’s [blake2s-js project](https://github.com/dchest/blake2s-js). The filename of the script was renamed to match the global `BLAKE2s` address that it defines.\n\n`nacl.js` is a copy of the [tweetnacl-js crypto library](https://github.com/dchest/tweetnacl-js) written by Dmitry Chestnykh. It has been modified to assign itself to `this` instead of `window` so that it can be imported seamlessly into the crypto worker. `nacl` is used throughout `miniLockLib` for a variety of cryptographic functions.\n\n`nacl-stream.js` is an unmodified copy of the [tweetnacl-js streaming encryption library](https://github.com/dchest/nacl-stream-js) written by Dmitry Chestnykh. Streaming encryption is employed within the crypto worker.\n\n`scrypt-async.js` is an unmodified script from Dmitry Chestnykh’s [scrypt-async-js](https://github.com/dchest/scrypt-async-js) project. It is used to derive a key pair from a secret phrase and email address. \n\n`zxcvbn.js` is an unmodified copy of Dropbox’s [zxcvbn password strength estimator](https://github.com/dropbox/zxcvbn). `miniLockLib` uses this library to calculate the entropy present in secret phrases.\n\n#### Making changes\n\nRun `npm start` to automatically re-compile the CoffeeScript source when it changes.\n\n#### Running tests\n\nRun `npm test` to `make` the project and launch the test kit in Google Chrome.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/45678/miniLockLib/issues"
  },
  "homepage": "https://github.com/45678/miniLockLib",
  "_id": "miniLockLib@0.0.0",
  "_shasum": "c72578b27702423a332a6432cb01d3f132bc0ff4",
  "_resolved": "git+https://git@github.com/45678/miniLockLib.git#7616a036fdaae7326bbe388f903c4ec55c9420d8",
  "_from": "miniLockLib@git+https://git@github.com/45678/miniLockLib.git"
}
